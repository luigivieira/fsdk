#!/usr/bin/env python
#
# This file is part of the Fun SDK (fsdk) project. The complete source code is
# available at https://github.com/luigivieira/fsdk.
#
# Copyright (c) 2016-2017, Luiz Carlos Vieira (http://www.luiz.vieira.nom.br)
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys
import base64
import numpy as np
import cv2
import argparse

if __name__ == '__main__':
    import sys
    sys.path.append('../../')

from fsdk.detectors.faces import Face

#---------------------------------------------
def main(argv):
    """
    Main entry point of this utility application.

    This is simply a function called by the checking of namespace __main__, at
    the end of this script (in order to execute only when this script is ran
    directly).

    Parameters
    ------
    argv: list of str
        Arguments received from the command line.
    """

    parser = argparse.ArgumentParser(description='Shows the face model used by '
                                     'the face detector.')

    parser.add_argument('-s', '--save', metavar='filename',
                        help='Also saves the image to the given file.')

    args = parser.parse_args()

    imageData = ''

    imageData = base64.b64decode(imageData)
    imageData = np.fromstring(imageData, dtype=np.uint8);
    faceImage = cv2.imdecode(imageData, 1)

    scale = 4
    faceImage = cv2.resize(faceImage, (0, 0), fx=scale, fy=scale)

    face = Face()
    face.detect(faceImage)

    model = np.ones(faceImage.shape, faceImage.dtype) * 255
    face.draw(model, False)

    r = face.region
    model = model[r[1]:r[3]+1, r[0]:r[2]+1]

    if args.save is not None:
        if not cv2.imwrite(args.save, model):
            print('Could not write to file {}'.format(args.save))

    cv2.imshow('Face Model', model)
    cv2.waitKey(0)

#---------------------------------------------
# namespace verification for invoking main
#---------------------------------------------
if __name__ == '__main__':
    main(sys.argv[1:])